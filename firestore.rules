
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Funções auxiliares
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Regras para usuários
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();

      // Regras para transações do usuário
      match /transactions/{transactionId} {
        allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
        allow create: if isAuthenticated() && isOwner(userId);
        allow update, delete: if false;
      }

      // Regras para lista de desejos
      match /wishlist/{gameId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }

      // Regras para amigos
      match /friends/{friendId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
    }

    // Regras para lojas
    match /stores/{storeId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (resource.data.ownerId == request.auth.uid || isAdmin());
      allow delete: if isAuthenticated() && isAdmin();

      // Regras para produtos da loja
      match /products/{productId} {
        allow read: if true;
        allow write: if isAuthenticated() && (get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId == request.auth.uid || isAdmin());
      }

      // Regras para transações da loja
      match /transactions/{transactionId} {
        allow read: if isAuthenticated() && (get(/databases/$(database)/documents/stores/$(storeId)).data.ownerId == request.auth.uid || isAdmin());
        allow create: if isAuthenticated();
        allow update, delete: if false;
      }
    }

    // Regras para aluguéis
    match /rentals/{rentalId} {
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.storeId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.storeIds ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid || 
        resource.data.storeId in get(/databases/$(database)/documents/users/$(request.auth.uid)).data.storeIds ||
        isAdmin()
      );
      allow delete: if isAuthenticated() && isAdmin();
    }

    // Regras para avaliações
    match /ratings/{ratingId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
    }
  }
}
